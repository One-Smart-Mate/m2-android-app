package com.ih.osm.data.model

import com.ih.osm.domain.model.CiltProcedureData

data class GetCiltProcedureResponse(
    val data: List<CiltProcedurePosition>,
)

data class CiltProcedurePosition(
    val id: Int,
    val siteId: Int,
    val ciltMstrId: Int,
    val positionId: Int,
    val levelId: Int,
    val status: String,
    val createdAt: String,
    val updatedAt: String,
    val deletedAt: String?,
    val position: CiltProcedurePositionDetail,
    val ciltMstr: CiltProcedureMaster,
)

data class CiltProcedurePositionDetail(
    val id: Int,
    val siteId: Int,
    val siteName: String,
    val siteType: String,
    val areaId: Int,
    val areaName: String,
    val levelId: Int?,
    val levelName: String?,
    val nodeResponsableId: Int,
    val nodeResponsableName: String,
    val route: String?,
    val order: Int,
    val name: String,
    val description: String,
    val status: String,
)

data class CiltProcedureMaster(
    val id: Int,
    val siteId: Int,
    val ciltName: String,
    val ciltDescription: String,
    val creatorId: Int,
    val creatorName: String,
    val reviewerId: Int,
    val reviewerName: String,
    val approvedById: Int,
    val approvedByName: String,
    val ciltDueDate: String,
    val standardTime: Int,
    val urlImgLayout: String?,
    val order: Int,
    val status: String,
    val dateOfLastUsed: String,
    val createdAt: String,
    val updatedAt: String,
    val deletedAt: String?,
    val sequences: List<CiltProcedureSequence>,
)

data class CiltProcedureSequence(
    val id: Int,
    val siteId: Int,
    val siteName: String,
    val ciltMstrId: Int,
    val ciltMstrName: String,
    val frecuencyId: Int,
    val frecuencyCode: String,
    val referencePoint: String,
    val order: Int,
    val secuenceList: String,
    val secuenceColor: String,
    val ciltTypeId: Int,
    val ciltTypeName: String,
    val referenceOplSopId: Int,
    val standardTime: Int,
    val standardOk: String,
    val remediationOplSopId: Int,
    val toolsRequired: String,
    val stoppageReason: Int,
    val machineStopped: Int,
    val specialWarning: String?,
    val quantityPicturesCreate: Int,
    val quantityPicturesClose: Int,
    val selectableWithoutProgramming: Int,
    val status: String,
    val createdAt: String,
    val updatedAt: String,
    val deletedAt: String?,
    val executions: List<ProcedureExecution>,
)

data class ProcedureExecution(
    val id: Int,
    val siteId: Int,
    val siteExecutionId: Int,
    val positionId: Int,
    val ciltId: Int,
    val ciltSecuenceId: Int,
    val levelId: Int,
    val route: String?,
    val userId: Int,
    val userWhoExecutedId: Int,
    val specialWarning: String?,
    val machineStatus: String?,
    val secuenceSchedule: String,
    val allowExecuteBefore: Boolean,
    val allowExecuteBeforeMinutes: Int,
    val toleranceBeforeMinutes: Int,
    val toleranceAfterMinutes: Int,
    val allowExecuteAfterDue: Boolean,
    val secuenceStart: String?,
    val secuenceStop: String?,
    val duration: Int,
    val realDuration: String?,
    val standardOk: String,
    val initialParameter: String?,
    val evidenceAtCreation: Boolean,
    val finalParameter: String?,
    val evidenceAtFinal: Boolean,
    val nok: Boolean,
    val stoppageReason: Boolean,
    val machineStopped: Boolean,
    val amTagId: Int,
    val referencePoint: String,
    val secuenceList: String,
    val secuenceColor: String,
    val ciltTypeId: Int,
    val ciltTypeName: String,
    val referenceOplSopId: Int,
    val remediationOplSopId: Int,
    val toolsRequiered: String,
    val selectableWithoutProgramming: Boolean,
    val status: String,
    val createdAt: String,
    val updatedAt: String,
    val deletedAt: String?,
    val evidences: List<Any>,
    val referenceOplSop: ProcedureOpl,
    val remediationOplSop: ProcedureOpl,
)

data class ProcedureOpl(
    val id: Int,
    val siteId: Int,
    val title: String,
    val objetive: String,
    val creatorId: Int,
    val creatorName: String,
    val reviewerId: Int,
    val reviewerName: String,
    val oplTypeId: Int?,
    val oplType: String,
    val order: Int,
    val ciltUsageCount: Int,
    val directUsageCount: Int?,
    val lastUsedAt: String,
    val createdAt: String,
    val updatedAt: String,
    val deletedAt: String?,
)

fun GetCiltProcedureResponse.toDomain() =
    try {
        CiltProcedureData(
            positions =
                this.data.map { position ->
                    CiltProcedureData.Position(
                        id = position.position.id,
                        name = position.position.name,
                        siteName = position.position.siteName,
                        areaName = position.position.areaName,
                        ciltMasters =
                            listOf(
                                CiltProcedureData.CiltMaster(
                                    id = position.ciltMstr.id,
                                    siteId = position.ciltMstr.siteId,
                                    ciltName = position.ciltMstr.ciltName,
                                    ciltDescription = position.ciltMstr.ciltDescription,
                                    creatorId = position.ciltMstr.creatorId,
                                    creatorName = position.ciltMstr.creatorName,
                                    reviewerId = position.ciltMstr.reviewerId,
                                    reviewerName = position.ciltMstr.reviewerName,
                                    approvedById = position.ciltMstr.approvedById,
                                    approvedByName = position.ciltMstr.approvedByName,
                                    ciltDueDate = position.ciltMstr.ciltDueDate,
                                    standardTime = position.ciltMstr.standardTime,
                                    urlImgLayout = position.ciltMstr.urlImgLayout,
                                    order = position.ciltMstr.order,
                                    dateOfLastUsed = position.ciltMstr.dateOfLastUsed,
                                    createdAt = position.ciltMstr.createdAt,
                                    updatedAt = position.ciltMstr.updatedAt,
                                    deletedAt = position.ciltMstr.deletedAt,
                                    status = position.ciltMstr.status,
                                    sequences =
                                        position.ciltMstr.sequences.map { seq ->
                                            CiltProcedureData.Sequence(
                                                id = seq.id,
                                                siteId = seq.siteId,
                                                siteName = seq.siteName,
                                                ciltMstrId = seq.ciltMstrId,
                                                ciltMstrName = seq.ciltMstrName,
                                                frecuencyId = seq.frecuencyId,
                                                frecuencyCode = seq.frecuencyCode,
                                                ciltTypeId = seq.ciltTypeId,
                                                ciltTypeName = seq.ciltTypeName,
                                                secuenceList = seq.secuenceList,
                                                secuenceColor = seq.secuenceColor,
                                                toolsRequired = seq.toolsRequired,
                                                standardTime = seq.standardTime,
                                                standardOk = seq.standardOk,
                                                referenceOplSopId = seq.referenceOplSopId,
                                                remediationOplSopId = seq.remediationOplSopId,
                                                stoppageReason = seq.stoppageReason,
                                                machineStopped = seq.machineStopped,
                                                quantityPicturesCreate = seq.quantityPicturesCreate,
                                                quantityPicturesClose = seq.quantityPicturesClose,
                                                selectableWithoutProgramming = seq.selectableWithoutProgramming,
                                                referencePoint = seq.referencePoint,
                                                order = seq.order,
                                                status = seq.status,
                                                createdAt = seq.createdAt,
                                                updatedAt = seq.updatedAt,
                                                deletedAt = seq.deletedAt,
                                                specialWarning = seq.specialWarning,
                                                executions =
                                                    seq.executions.map { exec ->
                                                        CiltProcedureData.Execution(
                                                            id = exec.id,
                                                            siteExecutionId = exec.siteExecutionId,
                                                            positionId = exec.positionId,
                                                            ciltId = exec.ciltId,
                                                            ciltSecuenceId = exec.ciltSecuenceId,
                                                            levelId = exec.levelId,
                                                            route = exec.route,
                                                            userId = exec.userId,
                                                            userWhoExecutedId = exec.userWhoExecutedId,
                                                            secuenceSchedule = exec.secuenceSchedule,
                                                            allowExecuteBefore = exec.allowExecuteBefore,
                                                            allowExecuteBeforeMinutes = exec.allowExecuteBeforeMinutes,
                                                            toleranceBeforeMinutes = exec.toleranceBeforeMinutes,
                                                            toleranceAfterMinutes = exec.toleranceAfterMinutes,
                                                            allowExecuteAfterDue = exec.allowExecuteAfterDue,
                                                            secuenceStart = exec.secuenceStart,
                                                            secuenceStop = exec.secuenceStop,
                                                            duration = exec.duration,
                                                            realDuration = exec.realDuration,
                                                            standardOk = exec.standardOk,
                                                            initialParameter = exec.initialParameter,
                                                            evidenceAtCreation = exec.evidenceAtCreation,
                                                            finalParameter = exec.finalParameter,
                                                            evidenceAtFinal = exec.evidenceAtFinal,
                                                            nok = exec.nok,
                                                            stoppageReason = exec.stoppageReason,
                                                            machineStopped = exec.machineStopped,
                                                            status = exec.status,
                                                            createdAt = exec.createdAt,
                                                            updatedAt = exec.updatedAt,
                                                            deletedAt = exec.deletedAt,
                                                            referenceOpl =
                                                                CiltProcedureData.Opl(
                                                                    id = exec.referenceOplSop.id,
                                                                    title = exec.referenceOplSop.title,
                                                                    objetive = exec.referenceOplSop.objetive,
                                                                    creatorName = exec.referenceOplSop.creatorName,
                                                                    reviewerName = exec.referenceOplSop.reviewerName,
                                                                    oplType = exec.referenceOplSop.oplType,
                                                                    ciltUsageCount = exec.referenceOplSop.ciltUsageCount,
                                                                    lastUsedAt = exec.referenceOplSop.lastUsedAt,
                                                                ),
                                                            remediationOpl =
                                                                CiltProcedureData.Opl(
                                                                    id = exec.remediationOplSop.id,
                                                                    title = exec.remediationOplSop.title,
                                                                    objetive = exec.remediationOplSop.objetive,
                                                                    creatorName = exec.remediationOplSop.creatorName,
                                                                    reviewerName = exec.remediationOplSop.reviewerName,
                                                                    oplType = exec.remediationOplSop.oplType,
                                                                    ciltUsageCount = exec.remediationOplSop.ciltUsageCount,
                                                                    lastUsedAt = exec.remediationOplSop.lastUsedAt,
                                                                ),
                                                        )
                                                    },
                                            )
                                        },
                                ),
                            ),
                    )
                },
        )
    } catch (e: Exception) {
        throw e
    }
